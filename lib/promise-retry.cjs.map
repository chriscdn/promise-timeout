{"version":3,"file":"promise-retry.cjs","sources":["../src/index.ts"],"sourcesContent":["export type Options = {\n  timeout?: number;\n  errorMessage?: string;\n  onTimeout?: () => void;\n};\n\nconst promiseTimeout = <T>(\n  promise: Promise<T>,\n  options: Options,\n): Promise<T> => {\n  return asyncTimeout(() => promise, options);\n};\n\nconst asyncTimeout = <T>(\n  asyncFn: () => Promise<T>, // Accepts an async function or a function returning a Promise\n  options: Options,\n): Promise<T> => {\n  const timeout = options.timeout ?? 30 * 1000; // 30s\n  const errorMessage = options.errorMessage ?? \"The promise timed out.\";\n  const onTimeout = options.onTimeout ?? (() => {});\n\n  let timeoutID: ReturnType<typeof setTimeout>;\n\n  const timeOutPromise = new Promise<T>((_, reject) =>\n    timeoutID = setTimeout(() => {\n      onTimeout();\n      reject(new Error(errorMessage));\n    }, timeout)\n  );\n\n  return Promise.race([asyncFn(), timeOutPromise]) // Invoke asyncFn to get the Promise\n    .finally(() => clearTimeout(timeoutID));\n};\n\nexport { asyncTimeout, promiseTimeout };\n"],"names":["asyncTimeout","asyncFn","options","_options$timeout","_options$errorMessage","_options$onTimeout","timeoutID","timeout","errorMessage","onTimeout","timeOutPromise","Promise","_","reject","setTimeout","Error","race","clearTimeout","promise"],"mappings":"AAMM,IAOAA,EAAe,SACnBC,EACAC,OACcC,EAAAC,EAAAC,EAKVC,EAJEC,EAAyBJ,OAAlBA,EAAGD,EAAQK,SAAOJ,EAAI,IAC7BK,EAAmC,OAAvBJ,EAAGF,EAAQM,cAAYJ,EAAI,yBACvCK,SAASJ,EAAGH,EAAQO,WAASJ,EAAK,aAIlCK,EAAiB,IAAIC,QAAW,SAACC,EAAGC,GACxC,OAAAP,EAAYQ,WAAW,WACrBL,IACAI,EAAO,IAAIE,MAAMP,GACnB,EAAGD,EAAQ,GAGb,OAAOI,QAAQK,KAAK,CAACf,IAAWS,IACtB,QAAC,kBAAMO,aAAaX,EAAU,EAC1C,gDA1BuB,SACrBY,EACAhB,GAEA,OAAOF,EAAa,WAAM,OAAAkB,CAAO,EAAEhB,EACrC"}