{"version":3,"file":"promise-retry.modern.js","sources":["../src/index.ts"],"sourcesContent":["export type Options = {\n  timeout?: number;\n  errorMessage?: string;\n  onTimeout?: () => void;\n};\n\nconst promiseTimeout = <T>(\n  promise: Promise<T>,\n  options: Options,\n): Promise<T> => {\n  return asyncTimeout(() => promise, options);\n};\n\nconst asyncTimeout = <T>(\n  asyncFn: () => Promise<T>, // Accepts an async function or a function returning a Promise\n  options: Options,\n): Promise<T> => {\n  const timeout = options.timeout ?? 30 * 1000; // 30s\n  const errorMessage = options.errorMessage ?? \"The promise timed out.\";\n  const onTimeout = options.onTimeout ?? (() => {});\n\n  let timeoutID: ReturnType<typeof setTimeout>;\n\n  const timeOutPromise = new Promise<T>((_, reject) =>\n    timeoutID = setTimeout(() => {\n      onTimeout();\n      reject(new Error(errorMessage));\n    }, timeout)\n  );\n\n  return Promise.race([asyncFn(), timeOutPromise]) // Invoke asyncFn to get the Promise\n    .finally(() => clearTimeout(timeoutID));\n};\n\nexport { asyncTimeout, promiseTimeout };\n"],"names":["promiseTimeout","promise","options","asyncTimeout","asyncFn","_options$timeout","_options$errorMessage","_options$onTimeout","timeout","errorMessage","onTimeout","timeoutID","timeOutPromise","Promise","_","reject","setTimeout","Error","race","finally","clearTimeout"],"mappings":"AAMM,MAAAA,EAAiBA,CACrBC,EACAC,IAEOC,EAAa,IAAMF,EAASC,GAG/BC,EAAeA,CACnBC,EACAF,SACcG,EAAAC,EAAAC,EACd,MAAMC,EAAyB,OAAlBH,EAAGH,EAAQM,SAAOH,EAAI,IAC7BI,EAAmCH,OAAvBA,EAAGJ,EAAQO,cAAYH,EAAI,yBACvCI,EAA6B,OAApBH,EAAGL,EAAQQ,WAASH,EAAK,OAExC,IAAII,EAEJ,MAAMC,EAAiB,IAAIC,QAAW,CAACC,EAAGC,IACxCJ,EAAYK,WAAW,KACrBN,IACAK,EAAO,IAAIE,MAAMR,GAAa,EAC7BD,IAGL,OAAOK,QAAQK,KAAK,CAACd,IAAWQ,IAC7BO,QAAQ,IAAMC,aAAaT,GAAU"}