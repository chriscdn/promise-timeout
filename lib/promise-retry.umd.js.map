{"version":3,"file":"promise-retry.umd.js","sources":["../src/index.ts"],"sourcesContent":["const promiseTimeout = <T>(\n  promise: Promise<T>,\n  timeout: number,\n  errMsg = \"The promise timed out.\",\n): Promise<T> => {\n  return asyncTimeout(() => promise, timeout, errMsg);\n};\n\nconst asyncTimeout = <T>(\n  asyncFn: () => Promise<T>, // Accepts an async function or a function returning a Promise\n  timeout: number,\n  errMsg = \"The promise timed out.\",\n): Promise<T> => {\n  let timeoutID: ReturnType<typeof setTimeout>;\n\n  const timeOutPromise = new Promise<T>((_, reject) =>\n    timeoutID = setTimeout(() => reject(new Error(errMsg)), timeout)\n  );\n\n  return Promise.race([asyncFn(), timeOutPromise]) // Invoke asyncFn to get the Promise\n    .finally(() => clearTimeout(timeoutID));\n};\n\nexport { asyncTimeout, promiseTimeout };\n"],"names":["promiseTimeout","asyncTimeout","asyncFn","timeout","errMsg","timeoutID","timeOutPromise","Promise","_","reject","setTimeout","Error","race","clearTimeout","promise"],"mappings":"wOAAMA,IAQAC,EAAe,SACnBC,EACAC,EACAC,GAEA,IAAIC,OAFJD,IAAAA,IAAAA,EAAS,0BAIT,IAAME,EAAiB,IAAIC,QAAW,SAACC,EAAGC,GACxC,OAAAJ,EAAYK,WAAW,WAAM,OAAAD,EAAO,IAAIE,MAAMP,GAAQ,EAAED,EAAQ,GAGlE,OAAOI,QAAQK,KAAK,CAACV,IAAWI,IACtB,QAAC,WAAM,OAAAO,aAAaR,EAAU,EAC1C,oCArBuB,SACrBS,EACAX,EACAC,GAEA,YAFAA,IAAAA,IAAAA,EAAS,0BAEFH,EAAa,WAAA,OAAMa,CAAO,EAAEX,EAASC,EAC9C"}